<h1>簡介</h1>
<p><a href="https://github.com/mdekmol/cd2019a-task1-2019cda_t1_g1">產品協同設計課程第一組</a></p>
<p><a href="https://cda-t1-g1.blogspot.com/">部落格</a></p>
<h1>組員</h1>
<p><a href="https://github.com/40623101">40623101</a> 王馨慧</p>
<p><a href="https://github.com/40623108">40623108</a> 林郁涵</p>
<p><a href="https://github.com/40623116">40623116</a> 楊子毅</p>
<p><a href="https://github.com/40623117">40623117</a> 楊智傑</p>
<p><a href="https://github.com/40623119">40623119</a> 歐宗韋</p>
<p><a href="https://github.com/40623122">40623122</a> 蔡柄澤</p>
<p><a href="https://github.com/40623129">40623129</a> 陳威誠</p>
<p><a href="https://github.com/40623140">40623140</a> 韓希然</p>
<p><a href="https://github.com/40423157">40423157</a>李昀霖</p>
<p>40623158</p>
<h1>課程內容</h1>
<p><span>使用可攜程式系統, 以及 </span><a href="https://github.com/chiamingyen/cmsimfly">CMSimfly</a><span><span> </span>與</span><a href="https://git-scm.com/download/win"><span> </span>portable Git</a><span><span> </span>管理各學員與分組的動態與靜態網際內容管理系統, 同時利用<span> </span></span><a href="https://www.onshape.com/">Onshape</a><span><span> </span>與<span> </span></span><a href="http://www.coppeliarobotics.com/">V-rep</a><span><span> </span>執行機電資整合產品開發, 當面臨各協同設計階段所遭遇問題時, 各學員可利用客製化程式加以解決.</span></p>
<p><span></span></p>
<p><span></span></p>
<p><a href="http://mde.tw/cd2019/content/Introduction.html"><span>from </span>2019 Spring 協同產品設計實習</a></p>
<p></p>
<h2>建立可攜系統</h2>
<p>課程影片</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/uEq_GtkkPx8" width="560"></iframe> </p>
<p>操作影片</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/hniWlQ0ib10" width="560"></iframe></p>
<h2>ungit-建立</h2>
<p>1.進入網址 : <a href="http://mde.tw/wcm2019/content/實習項目二.html">http://mde.tw/wcm2019/content/實習項目二.html</a> ，下載 <a href="https://drive.google.com/file/d/1G3cEZsw6d7NjqLLgu9jljVNBd6wF-ZrG/view">nodejs_with_ungit.7z</a> 。</p>
<p><img alt="" height="877" src="/images/download_nodejs.jpg" width="931"/></p>
<p>2.將解壓縮完的整個 <span>nodejs 資料夾放入可攜 data 資料夾中。<img alt="" height="808" src="/images/Y_nodejs.jpg" width="671"/></span></p>
<p>3.以 <span>SciTE 編輯器編輯 start_cadlab.bat。</span></p>
<p><span><img alt="" height="990" src="/images/start_bat.jpg" width="562"/></span></p>
<p>*並且要在path那行增加一個路徑，如下圖</p>
<p><img alt="" height="642" src="/images/未命名.png" width="1196"/></p>
<p>4.在 <span>SciTE 編輯器上輸入指令，指令如下 :</span></p>
<p><span>ungit --launchBrowser=0 --launchCommand "C:\PROGRA~2\Google\Chrome\Application\chrome.exe  %%U"</span></p>
<p><span>如下圖</span></p>
<p><span><img alt="" height="1040" src="/images/Sc1_fsB89RAG6l.png" width="1920"/></span>5.將上述指令存入 Y:\kungit.bat 批次檔案中。</p>
<p><span><img alt="" height="533" src="/images/kungit_save.jpg" width="944"/></span></p>
<p>6. 進入倉儲的資料夾後，<span>只要輸入 kungit 即可呼叫此一 ungit 指令執行。如下圖</span></p>
<p><span><img alt="" height="648" src="/images/未命名-2.png" width="1200"/></span></p>
<h3>更改帳號</h3>
<p>進入<span> home_cadlab 找到 .gitconfig 這個檔案</span></p>
<p><span><img alt="" height="596" src="/images/Folder.png" width="846"/></span></p>
<p><span>以 <span>SciTE 編輯器編輯 .gitconfig<br/>更改裡面的 name 與 email 並儲存<br/></span></span></p>
<p><span><span><img alt="" height="740" src="/images/gitconfig.png" width="576"/></span></span></p>
<p><span><span></span></span></p>
<h3>ungit上推問題與解決</h3>
<p>ungit無法確認身分，導致無法推送</p>
<p><img alt="" height="385" src="/images/fail.png" width="800"/></p>
<p><span>以 </span><span>SciTE 編輯器編輯 start_cadlab.bat<br/>把最後的 home 更改成 home_cadlab ，因為帳號在 home_cadlab 這個資料夾裡面</span></p>
<p><span><img alt="" height="740" src="/images/change.png" width="576"/></span></p>
<p><span></span>更改並儲存之後點擊 stop.bat 關閉，並重新打開，就可以正常上推資料了</p>
<p><img alt="" height="385" src="/images/solved.png" width="800"/></p>
<h3>ungit上傳資料</h3>
<p>點擊上方create an empty commit 即可創立新的commit</p>
<p><img alt="" height="937" src="/images/chrome_JU9YRI40Jr.png" width="1920"/></p>
<p>輸入標題及內容即可上傳</p>
<p><img alt="" height="937" src="/images/1.png" width="1920"/></p>
<p>commit完成後點擊白色的gh-pages再點擊push就上推完成</p>
<p><img alt="" height="937" src="/images/2.png" width="1920"/></p>
<p>若要刪除commit，點擊藍色圓圈，點擊uncommit即可</p>
<p><img alt="" height="937" src="/images/3.png" width="1920"/></p>
<p></p>
<h2>SSH Public Key</h2>
<p><span>(一)關閉操作系統儲存 Github 帳號密碼設定</span></p>
<p><span>1.使用指令「</span>git config --edit --system」，<span>帶出 vi 編輯器。</span></p>
<p><span>2.編輯 git 指令所使用的系統設定(按鍵H,J,K,L對應控制左下上右)。</span></p>
<p><span>3.按a進入編輯模式，</span>編輯模式最底下會顯示「-- INSERT --<span>」。</span></p>
<p><span><img alt="" height="770" src="/images/cmd_EDIT_INSERT.png" width="822"/></span></p>
<p><span>4.按BACKSPACE刪除最後一行如下圖。</span></p>
<p><span><img alt="" height="770" src="/images/cmd_EDIT_INSERT_2.jpg" width="822"/></span></p>
<p><span>5.刪除完按ESC鍵離開編輯模式。<br/></span></p>
<p><span>6.輸入「:wq」存檔並關閉。</span></p>
<p><span><img alt="" height="770" src="/images/cmd_EDIT_wq.png" width="822"/></span></p>
<p><span>(二)建立 OpenSSH 格式的 Private 與 Public Keys</span></p>
<p><span>1.在<span>可攜系統的命令列視窗輸入「sh_yen」，執行 Git 的 shell。<img alt="" height="512" src="/images/SSH_sh_yen.jpg" width="979"/></span></span></p>
<p><span></span>2.<span>使用「</span><span>ssh-keygen -t rsa -b 4096 -C "This is my key"」。</span></p>
<p><span><img alt="" height="512" src="/images/SSH_KEY.jpg" width="979"/></span></p>
<p><span>3.會在y:\home\.ssh\id_rsa與id_rsa.pub建立Private 與 Public 金鑰。(在home裡出現ssh的資料夾)</span><span><img alt="" height="500" src="/images/explorer_2019-03-26_23-31-23.png" width="1208"/></span>4.將 .ssh資料夾裡的id_rsa.pub 的內容轉貼白色視窗裡</p>
<p><img alt="" height="500" src="/images/explorer_2019-03-26_23-31-31.png" width="1208"/></p>
<p><img alt="" height="1030" src="/images/Sc1_2019-03-26_23-31-48.png" width="1920"/></p>
<p>5.到github點選帳號下的settings再點選new ssh key</p>
<p><img alt="" height="778" src="/images/未命名et34.png" width="1644"/></p>
<p>6.並將白色內容複製到 Github 帳號 settings 中 SSH and GPG keys 項目內的 SSH Public Key 區再點選Add ssh key就完成了。</p>
<p><img alt="" height="903" src="/images/chrome_2019-03-26_23-42-23.png" width="1920"/></p>
<h1>V-rep</h1>
<p>持續更新中</p>
<p></p>
<p><img alt="" height="453" src="/images/task2.gif" width="800"/></p>
<h2>模擬影片</h2>
<p>40423157</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/Pw9ZdlzlQVQ" width="560"></iframe></p>
<h2>手足球圖檔</h2>
<h1>個人操作影片</h1>
<p>40623119</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/P32dakHkfbA" width="560"></iframe></p>
<p>40623122<br/><br/><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/e5D5stE0QYE" width="560"></iframe></p>
<h1>git 手冊</h1>
<p>幾乎每一種版本控制系統（Version Control System，以下簡稱 VCS）都支援某種形式的分支（branch）功能， 使用分支意味著你可以從開發主線上分離開來，然後在不影響主線的情況下繼續工作。<br/>有人把 Git 的分支模型視為它的「殺手級功能」， 它有何特別之處呢？新建分支的操作幾乎可以在瞬間完成，並且一般來說切換不同分支也很快； 跟其它的 VCS 不一樣的地方是 Git 鼓勵在工作流程中頻繁地使用分支與合併（merge），即使一天之內進行許多次都沒問題。</p>
<p><span>git branch </span>:建立一個新的分支這會在目前提交上新建一個指標，它並不會切換到這個分支。</p>
<p><span>git checkout + 分支名稱</span>:切換到一個已經存在的分支。</p>
<p>*切換分支會修改工作目錄裡的檔案<br/>當你在 Git 中切換分支時，工作目錄內的檔案將會被修改； 如果切換到舊分支，你的工作目錄會回復到看起來就像當初你最後一次在這個分支提交時的樣子。 如果 Git 無法很乾淨地切換過去，它就不會讓你切換過去。</p>
<p><span>git merge </span>:緊急修正分支進行合併。</p>
<p>git add .</p>
<p>git commit -m "檔案名"</p>
<p>git push</p>
<p>mkdir 名稱 ：創建資料夾</p>
<p><span style="color: #ff0000;">github版本回推</span></p>
<p>1.git  reflog</p>
<p>2.git reset  --hard 版本名稱(下圖)</p>
<p><img alt="" height="648" src="/images/5465.png" width="1152"/></p>
<p>3.git  push  -f </p>